/**
 * ÏÑúÎ≤Ñ ÏÉÅÌÉú Í¥ÄÎ¶¨ ÌõÖ
 * ÏÑúÎ≤Ñ Ïû¨ÏãúÏûë Í∞êÏßÄ Î∞è Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÏûêÎèô ÏÇ≠Ï†ú Ï≤òÎ¶¨
 */

import { useEffect, useRef } from 'react';

interface ServerStatus {
  startTime: number;
  uptime: number;
  timestamp: number;
  restarted: boolean;
  shouldClearPortfolios: boolean;
}

interface UseServerStatusOptions {
  onServerRestart?: () => void;
  checkInterval?: number; // Ï≤¥ÌÅ¨ Í∞ÑÍ≤© (ms)
}

export function useServerStatus(options: UseServerStatusOptions = {}) {
  const { onServerRestart, checkInterval = 30000 } = options; // Í∏∞Î≥∏ 30Ï¥àÎßàÎã§ Ï≤¥ÌÅ¨
  const lastKnownStartTimeRef = useRef<number | null>(null);
  const intervalRef = useRef<NodeJS.Timeout | null>(null);

  const checkServerStatus = async () => {
    try {
      const params = new URLSearchParams();
      if (lastKnownStartTimeRef.current) {
        params.append('lastKnownStartTime', lastKnownStartTimeRef.current.toString());
      }

      const response = await fetch(`/api/server-status?${params}`);
      if (!response.ok) {
        console.warn('‚ö†Ô∏è [Server Status] ÏÑúÎ≤Ñ ÏÉÅÌÉú ÌôïÏù∏ Ïã§Ìå®');
        return;
      }

      const status: ServerStatus = await response.json();

      // ÏÑúÎ≤ÑÍ∞Ä Ïû¨ÏãúÏûëÎêú Í≤ΩÏö∞
      if (status.restarted && status.shouldClearPortfolios) {
        console.log('üîÑ [Server Status] ÏÑúÎ≤Ñ Ïû¨ÏãúÏûë Í∞êÏßÄÎê®');

        // Í∞úÎ∞ú ÌôòÍ≤ΩÏóêÏÑúÎäî Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÏûêÎèô ÏÇ≠Ï†ú ÎπÑÌôúÏÑ±Ìôî
        const isDevelopment = process.env.NODE_ENV === 'development' ||
                             typeof window !== 'undefined' && window.location.hostname === 'localhost';

        if (!isDevelopment) {
          // ÌîÑÎ°úÎçïÏÖò ÌôòÍ≤ΩÏóêÏÑúÎßå Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÏÇ≠Ï†ú
          if (typeof window !== 'undefined') {
            localStorage.removeItem('ai_portfolios');
            console.log('‚úÖ [Server Status] Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÏÇ≠Ï†ú ÏôÑÎ£å (ÌîÑÎ°úÎçïÏÖò ÌôòÍ≤Ω)');
          }
        } else {
          console.log('üîß [Server Status] Í∞úÎ∞ú ÌôòÍ≤ΩÏóêÏÑúÎäî Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÏûêÎèô ÏÇ≠Ï†ú Í±¥ÎÑàÎúÄ');
        }

        // ÏΩúÎ∞± Ïã§Ìñâ
        onServerRestart?.();
      }

      // ÏÑúÎ≤Ñ ÏãúÏûë ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏
      lastKnownStartTimeRef.current = status.startTime;

    } catch (error) {
      console.error('‚ùå [Server Status] ÏÑúÎ≤Ñ ÏÉÅÌÉú ÌôïÏù∏ Ïò§Î•ò:', error);
    }
  };

  useEffect(() => {
    // Ï¥àÍ∏∞ Ï≤¥ÌÅ¨
    checkServerStatus();

    // Ï£ºÍ∏∞Ï†Å Ï≤¥ÌÅ¨ ÏÑ§Ï†ï
    intervalRef.current = setInterval(checkServerStatus, checkInterval);

    // ÌÅ¥Î¶∞ÏóÖ
    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
    };
  }, [checkInterval, onServerRestart]);

  // ÌéòÏù¥ÏßÄ Ìè¨Ïª§Ïä§ ÏãúÏóêÎèÑ Ï≤¥ÌÅ¨ (ÏÇ¨Ïö©ÏûêÍ∞Ä ÌÉ≠ÏùÑ Îã§Ïãú ÌôúÏÑ±ÌôîÌñàÏùÑ Îïå)
  useEffect(() => {
    const handleFocus = () => {
      checkServerStatus();
    };

    window.addEventListener('focus', handleFocus);
    return () => {
      window.removeEventListener('focus', handleFocus);
    };
  }, []);

  return {
    checkServerStatus
  };
}
